# Task ID: 3
# Title: Implement Image Upload Component
# Status: pending
# Dependencies: 1, 2
# Priority: high
# Description: Create the ImageUpload component for uploading garment and person images as specified in the PRD.
# Details:
Implement the ImageUpload component in components/tryon/upload/ImageUpload.tsx:

1. Use the react-dropzone library for drag-and-drop functionality
2. Implement the component according to the PRD specification:
```typescript
'use client';

import { useCallback, useState } from 'react';
import Image from 'next/image';
import { useDropzone } from 'react-dropzone';

interface ImageUploadProps {
  type: 'garment' | 'person';
  onUpload: (file: File) => void;
  currentFile?: File | null;
}

export function ImageUpload({ type, onUpload, currentFile }: ImageUploadProps) {
  const [preview, setPreview] = useState<string | null>(null);
  const [dragActive, setDragActive] = useState(false);

  const onDrop = useCallback((acceptedFiles: File[]) => {
    const file = acceptedFiles[0];
    if (file) {
      const previewUrl = URL.createObjectURL(file);
      setPreview(previewUrl);
      onUpload(file);
    }
  }, [onUpload]);

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: {
      'image/*': ['.jpeg', '.jpg', '.png', '.webp']
    },
    maxSize: 10 * 1024 * 1024, // 10MB
    multiple: false
  });

  const isGarment = type === 'garment';
  const placeholder = isGarment ? 'ðŸ‘”' : 'ðŸ‘¤';
  const title = isGarment ? 'Upload Garment Photo' : 'Upload Your Photo';
  const subtitle = isGarment 
    ? 'Flat lay, mannequin, or product shots work best'
    : 'Face should be clearly visible, front-facing preferred';

  return (
    <div
      {...getRootProps()}
      className={`
        relative border-2 border-dashed rounded-xl p-8 text-center cursor-pointer transition-all
        ${isDragActive ? 'border-blue-500 bg-blue-50' : 'border-gray-300 hover:border-gray-400'}
        ${preview ? 'border-green-500' : ''}
      `}
    >
      <input {...getInputProps()} />
      
      {preview ? (
        <div className="space-y-4">
          <div className="relative w-48 h-48 mx-auto">
            <Image
              src={preview}
              alt="Preview"
              fill
              className="object-cover rounded-lg"
            />
          </div>
          <div className="space-y-2">
            <p className="font-medium text-green-700">âœ“ Image uploaded</p>
            <p className="text-sm text-gray-600">
              Click to choose a different photo
            </p>
          </div>
        </div>
      ) : (
        <div className="space-y-4">
          <div className="text-6xl">{placeholder}</div>
          <div className="space-y-2">
            <h3 className="text-lg font-medium">{title}</h3>
            <p className="text-sm text-gray-500">{subtitle}</p>
            <p className="text-xs text-gray-400">
              Drag & drop or click to select â€¢ Max 10MB â€¢ JPG, PNG, WebP
            </p>
          </div>
        </div>
      )}
    </div>
  );
}
```

3. Add cleanup logic to release object URLs when the component unmounts
4. Ensure the component handles both garment and person image types with appropriate UI differences
5. Implement proper validation for file types and sizes according to the PRD specifications

# Test Strategy:
Create a simple test page that renders the ImageUpload component with both 'garment' and 'person' types. Verify that:
1. The component renders correctly with the appropriate UI for each type
2. File uploads work via both drag-and-drop and click-to-select
3. Preview images are displayed correctly
4. File validation works as expected (size limits, file types)
5. The onUpload callback is called with the correct file
